# AI Writers Workshop MCP Server configuration

# Fast-Agent MCP Server Configuration
mcp:
  servers:
    # Map the "ollama_server" name to the "OllamaMCPServer" configuration
    ollama_server:
      command: "uv"
      args:
      - "--directory"
      - "/home/ty/Repositories/ai_workspace/ollama-mcp-server/src/ollama_mcp_server"
      - "run"
      - "server.py"

    # Include other useful servers from your configuration
    arxiv-mcp-server:
      command: "uv"
      args:
      - "--directory"
      - "/home/ty/Repositories/arxiv-mcp-server"
      - "run"
      - "arxiv-mcp-server"
      - "--storage-path"
      - "/home/ty/Documents/core_bot_instruction_concepts/arxiv-papers"

    mcp-code-executor:
      command: "node"
      args:
      - "/home/ty/Repositories/mcp_code_executor/build/index.js"
      env:
        CODE_STORAGE_DIR: "/home/ty/Repositories/ai_workspace/python_coding_storage"
        CONDA_ENV_NAME: "mcp_code_executor_env"

    chroma:
      command: "uvx"
      args:
      - "chroma-mcp"
      - "--client-type"
      - "persistent"
      - "--data-dir"
      - "/home/ty/Repositories/chroma-db"

    sqlite:
      command: "uv"
      args:
      - "--directory"
      - "/home/ty/Repositories/servers/src/sqlite"
      - "run"
      - "mcp-server-sqlite"
      - "--db-path"
      - "/home/ty/Repositories/sqlite-db/NEXUS_PRIME.db"

    neocoder:
      command: "uv"
      args:
      - "--directory"
      - "/home/ty/Repositories/NeoCoder-neo4j-ai-workflow/src/mcp_neocoder"
      - "run"
      - "mcp_neocoder"
      env:
        NEO4J_URL: "bolt://localhost:7687"
        NEO4J_USERNAME: "neo4j"
        NEO4J_PASSWORD: "your-neo4j-password-here"
        NEO4J_DATABASE: "neo4j"

    zonos-tts-mcp:
      command: "node"
      args:
      - "/home/ty/Repositories/Zonos-TTS-MCP-Linux/dist/server.js"

    desktop-commander:
      command: "npx"
      args:
      - "-y"
      - "/home/ty/Repositories/DesktopCommanderMCP/dist/index.js"
      - "run"
      - "desktop-commander"
      - "--config"
      - "\"{}\""

    brave-search:
      command: "npx"
      args:
      - "-y"
      - "@modelcontextprotocol/server-brave-search"
      env:
        BRAVE_API_KEY: "your-key-here"

  #  prompts:
  #      command: prompt-server
  #      args: ["history.json"]

    mcp-logic:
      command: "uv"
      args:
      - "--directory"
      - "/home/ty/Repositories/mcp-logic/src/mcp_logic"
      - "run"
      - "mcp_logic"
      - "--prover-path"
      - "/home/ty/Repositories/mcp-logic/ladr/bin"

    puppeteer:
      command: "npx"
      args:
      - "-y"
      - "@modelcontextprotocol/server-puppeteer"

# End mcp list
# Default model configuration (api fees optional)
# default_model: "openai.gpt-4o" "generic.qwen3:latest" "qwen3:30b-a3b"
default_model: "generic.qwen3:30b-a3b"
default_request_params:
  temperature: 0.6,
  max_tokens: 8176,
  context_length: 31768

# Default model for all agents (can be overridden with --model flag)

# Roots configuration for file access (removed as folders are in repo root)
# The server will now automatically locate resources and prompts directories
